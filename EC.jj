
options {
    STATIC = false;
    // BUILD_PARSER = false;
    OUTPUT_DIRECTORY = "compilador";
}

PARSER_BEGIN(EC)

    package compilador;

    import java.io.*;
    import java.util.*;

    public class EC {

        private static final String VERSION = "0.1.5";
        private static final String NAME = EC.class.getSimpleName();
        private static final String PROGRAM = "." + File.separatorChar + NAME;
        private static int index = 0;
        private static String command = "";
        private static String source_file = "";

        private static void unimplemented(){
            System.out.println("ERROR: El comando '" + command + "' todavia no esta implementado.");
            System.out.println();
            System.exit(-1);
        }

        private static void usage(){

            System.out.println("USO: " + PROGRAM + " <Comando>");
            System.out.println(" Compila o revisa la estructura de un código fuente escrito en el lenguaje ELL.");
            System.out.println(" El <Comando> por defecto es '-c'.");
            System.out.println("  <Comando>:");
            System.out.println("    -c <codigo_fuente.txt>");
            System.out.println("      Compila el código fuente.");
            System.out.println("    -l <codigo_fuente.txt>");
            System.out.println("      Revisa la léxica del código fuente.");
            System.out.println("    -sin <codigo_fuente.txt>");
            System.out.println("      Revisa la sintaxis del código fuente.");
            System.out.println("    -h o -u");
            System.out.println("      Muestra este mensaje de ayuda.");
            System.out.println("    -v");
            System.out.println("      Muestra la versión del compilador.");
            System.out.println();
        }

        private static void checkTooManyArguments(String[] args){
            if(args.length > index){
                usage();
                System.err.println("ERROR: Hay más de un comando.");
                System.out.println();
                System.exit(-1);
            }
        }

        private static void setSourceFile(String[] args){

            if(source_file.isEmpty()){

                if(args.length < index + 1){
                    usage();
                    System.err.println("ERROR: Debe de ingresar el archivo del código fuente.");
                    System.out.println();
                    System.exit(-1);
                }

                source_file = args[index++];
                // index = 2
            }

            checkTooManyArguments(args);

            ensureSourceExists();

        }

        private static void ensureSourceExists(){
            File file = new File(source_file);
            if(!file.exists()){
                usage();
                System.err.println("ERROR: El archivo " + source_file + " no existe.");
                System.out.println();
                System.exit(-1);
            }

        }

        private static void checkLex(){

            try{

                FileReader sourceFileReader = new FileReader(source_file);

                // Instanciar objeto de TokenManager y obtener todos los tokens. Ej:
                ECTokenManager lexico = new ECTokenManager(new SimpleCharStream(sourceFileReader));

                // Lista de errores
                ArrayList<String> errores = new ArrayList<String>();

                Token t = null;
                do {
                    try {
                        t = lexico.getNextToken();

                        if (t.kind == ECTokenManager.INVALIDO)
                            throw new TokenMgrError("Error léxico en línea " +
                                    t.beginLine + ", columna " + t.beginColumn +
                                    ". Se encontró símbolo inválido '" + t.image + "'.\n        " +
                                    "Posible solución: Remover símbolo.", TokenMgrError.LEXICAL_ERROR);

                        if (t.kind == ECTokenManager.NUMERO_INVALIDO)
                            throw new TokenMgrError("Error léxico en línea " +
                                    t.beginLine + ", columna " + t.beginColumn +
                                    ". Se encontró un número inválido '" + t.image + "'.\n        " +
                                    "Posible solución: Remover o revisar número.", TokenMgrError.LEXICAL_ERROR);

                    } catch (TokenMgrError ex) {
                        errores.add(ex.getMessage());
                    }
                } while (t.kind != ECTokenManager.EOF);

                System.out.println();

                if (errores.isEmpty()) {
                    System.out.println("Se pasó el test léxico con éxito.\nNo se encontraron errores.");
                    System.exit(0);
                }

                System.err.println("No se pasó el test léxico.");

                if (errores.size() == 1) {
                    System.err.println("Se encontró " + errores.size() + " error:");
                } else {
                    System.err.println("Se encontraron " + errores.size() + " errores:");
                }

                for (int i = 0; i < errores.size(); i++) {
                    System.err.println("    " + (i + 1)  + ".- " + errores.get(i));
                }

                System.exit(-1);
            } catch (FileNotFoundException ex) {
                System.err.println(ex.getMessage());
            }
        }

        private static void checkSyntax() {

            try {
                FileReader sourceFileReader = new FileReader(source_file);

                EC sintactico = new EC(sourceFileReader);

                System.out.println("Fase sintáctica:");
                System.out.println("----------------------------------------------");
                sintactico.programa();
                System.out.println("El programa pasó la prueba sintáctica correctamente.");
            } catch (FileNotFoundException ex) {
                System.err.println(ex.getMessage());
            } catch (ParseException ex) {
                ex.printStackTrace();
            }


        }

        public static void main(String[] args) {

            if (args.length == 0) {
                usage();
                System.err.println("ERROR: Debe de ingresar el archivo del código fuente o un comando.");
                System.exit(-1);
            }

            command = "-c";
            source_file = "";

            if(args[index].startsWith("-"))
                command = args[index];
            else
                source_file = args[index];

            index++;

            // index = 1
            switch (command){

                case "-c":

                    setSourceFile(args);

                    // Compilar
                    unimplemented();

                    break;
                case "-l":

                    setSourceFile(args);

                    // Revisar fase lexica
                    checkLex();

                    break;
                case "-sin":

                    setSourceFile(args);

                    // Revisar fase sintectica
                    checkSyntax();

                    break;
                case "-h":
                case "-u":

                    checkTooManyArguments(args);

                    usage();

                    break;
                case "-v":

                    checkTooManyArguments(args);

                    System.out.println(NAME + " " + VERSION);

                    break;
                default:
                    usage();
                    System.out.println("ERROR: Commando '" + command + "' no existe.");
                    System.exit(-1);
                    break;
            }

        }
    }
    
PARSER_END(EC)

// Inicio y fin del programa
TOKEN : {

    <INICIO: "Inicio">{
        System.out.println(image + " -> PR_Arranque_Programa");
    }
    |
    <FIN: "Fin">{
        System.out.println(image + " -> PR_Arranque_Programa");
    }

}

// Tipos de dato
TOKEN : {

    <ENTERO: ("Entero" | "entero")>{
        System.out.println(image + " -> PR_Tipo_De_Dato");
    }
    |
    <FLOTANTE : ("Flotante" | "flotante")>{
        System.out.println(image + " -> PR_Tipo_De_Dato");
    }
    |
    <CADENA: ("Cadena" | "cadena")>{
        System.out.println(image + " -> PR_Tipo_De_Dato");
    }
    |
    <CARACTER: ("Caracter" | "caracter")>{
        System.out.println(image + " -> PR_Tipo_De_Dato");
    }
    |
    <BOOLEANO: ("Booleano" | "booleano")>{
        System.out.println(image + " -> PR_Tipo_De_Dato");
    }
}

// Constantes/Literales
TOKEN : {
    <#LETRA: ["a" - "z", "ñ"] | ["A" - "Z", "Ñ"]>
    |
    <#NUMERO: ["0" - "9"]>
    |
   /*<#SIMBOLO: [",", ".", " ", ":", "°", "!", "¬", "|", "#", "$", "%", "&",
                "/", "(", ")", "=", "?", "¿", "¡", "@", "¨", "´", "+", "*",
                "~", "{", "[", "^", "}", "]", "`", "<", ">", ";", "-", "_", "\\",
                "\"", "\'"]>
    |*/
    <CADENA_TEXTO: "\"" ( ~["\""] )* "\"">{
        System.out.println(image + " -> Cadena_Texto");
    }
    |
    <CARACTER_TEXTO: "'"( ~["'"] | "" )"'">{
        System.out.println(image + " -> Caracter_Texto");
    }
    |
    <NUMERO_ENTERO: ("-" | "" | "+")(<NUMERO>)+>{
        System.out.println(image + " -> Numero_Entero");
    }
    |
    <NUMERO_DECIMAL: ("-" | "" | "+")(<NUMERO>)+"."(<NUMERO>)+>{
        System.out.println(image + " -> Numero_Decimal");
    }
    |
    <BOOLEANO_FALSO: "Falso">{
        System.out.println(image + " -> PR_Booleano_Falso");
    }
    |
    <BOOLEANO_VERDADERO: "Verdadero">{
        System.out.println(image + " -> PR_Booleano_Verdadero");
    }
    |
    <COMENTARIO: "#"( ~["\n", "\r"] )*>{
        System.out.println(image + " -> Comentario");
    }
    |
    <DELIMITADOR: ";">{
        System.out.println(image + " -> Delimitador");
    }

}

// Escritura, Lectura y Definición de variables
TOKEN : {
    <INTERPRETAR: "Interpretar">{
        System.out.println(image + " -> PR_Lectura");
    }
    |
    <ESCRIBIR: "Escribir">{
        System.out.println(image + " -> PR_Escritura");
    }
    |
    <ESTABLECER: "Establecer">{
        System.out.println(image + " -> PR_Definicion_Varible");
    }
}

// Operadores
TOKEN : {
    <ASIGNACION: "=">{
        System.out.println(image + " -> Operador_Asignacion");
    }
    |
    <SUMA: "+">{
        System.out.println(image + " -> Operador_Suma");
    }
    |
    <RESTA: "-">{
        System.out.println(image + " -> Operador_Resta");
    }
    |
    <MULTIPLICACION: "*">{
        System.out.println(image + " -> Operador_Mult");
    }
    |
    <DIVISION: "/">{
        System.out.println(image + " -> Operador_Div");
    }
    |
    <MODULO: "%">{
        System.out.println(image + " -> Operador_Mod");
    }
    |
    <LOGICO_AND: "&&">{
        System.out.println(image + " -> Operador_Logico_AND");
    }
    |
    <LOGICO_OR: "||">{
        System.out.println(image + " -> Operador_Logico_OR");
    }
    |
    <LOGICO_NOT: "!">{
        System.out.println(image + " -> Operador_Logico_NOT");
    }
    |
    <ASIGNACION_COMPUESTA: (<SUMA>|<RESTA>|<MULTIPLICACION>|<DIVISION>|<MODULO>|<LOGICO_AND>|<LOGICO_OR>)<ASIGNACION>>{
        System.out.println(image + " -> Operador_Asignacion_Compuesta");
    }
    |
    <OPERADOR_IGUAL: "==">{
        System.out.println(image + " -> Operador_igualQue");
    }
    |
    <OPERADOR_DIFERENTE: "!=">{
        System.out.println(image + " -> Operador_diferente");
    }
    |
    <OPERADOR_MAYOR: ">">{
        System.out.println(image + " -> Operador_mayorQue");
    }
    |
    <OPERADOR_MENOR: "<">{
        System.out.println(image + " -> Operador_menorQue");
    }
    |
    <OPERADOR_MAYOR_IGUAL: ">=">{
        System.out.println(image + " -> Operador_mayorIgualQue");
    }
    |
    <OPERADOR_MENOR_IGUAL: "<=">{
        System.out.println(image + " -> Operador_menorIgualQue");
    }
    |
    <OPERADOR_DOS_PUNTOS: ":">{
        System.out.println(image + " -> Operador_Dos_Puntos");
    }
    |
    <PAREN_ABIERTO: "(">{
        System.out.println(image + " -> Parentesis_Abierto");
    }
    |
    <PAREN_CERRADO: ")">{
        System.out.println(image + " -> Parentesis_Cerrado");
    }
}

// Ciclos
TOKEN : {
    <INICIO_CICLO_PARA: "Para">{
        System.out.println(image + " -> PR_Ciclo_Para");
    }
    |
    <CONDICION_CICLO_PARA: "Hasta que">{
        System.out.println(image + " -> PR_Condicion_Ciclo_Para");
    }
    |
    <INCREMENTO_CICLO_PARA: "Con incremento">{
        System.out.println(image + " -> PR_Incremento_Ciclo_Para");
    }
    |
    <FIN_CICLO_PARA: "FinPara">{
        System.out.println(image + " -> PR_Fin_Ciclo_Para");
    }
    |
    <INICIO_CICLO_MIENTRAS: "Mientras">{
        System.out.println(image + " -> PR_Ciclo_Mientras");
    }
    |
    <FIN_CICLO_MIENTRAS: "FinMientras">{
        System.out.println(image + " -> PR_Fin_Ciclo_Mientras");
    }
    |
    <INICIO_CICLO_REPETIR: "Repetir">{
        System.out.println(image + " -> PR_Ciclo_Repetir");
    }
    |
    <CONDICION_CICLO_REPETIR: "Finaliza cuando">{
        System.out.println(image + " -> PR_Condicion_Ciclo_Repetir");
    }
}

// Condicionales
TOKEN : {
    <INICIO_CONDICIONAL_SI:"Si"> {
        System.out.println(image + " -> PR_Condicional_Si");
    }
    |
    <ENTONCES:"Entonces">{
        System.out.println(image + " -> PR_Entonces");
    }
    |
    <CONDICIONAL_SINO:"Sino">{
        System.out.println(image + " -> PR_Condicional_Sino");
    }
    |
    <FIN_CONDICIONAL_SI:"FinSi">{
        System.out.println(image + " -> PR_Fin_Condicional_Si");
    }
    |
    <INICIO_CONDICIONAL_CONFORME:"Conforme">{
        System.out.println(image + " -> PR_Condicional_Conforme");
    }
    |
    <CASO:"Caso">{
        System.out.println(image + " -> PR_Conforme_Caso");
    }
    |
    <CASO_PREDETERMINADO:"En otro caso">{
        System.out.println(image + " -> PR_Conforme_Caso_Predeterminado");
    }
    |
    <FIN_CONFORME:"FinConforme">{
        System.out.println(image + " -> PR_Fin_Condicional_Conforme");
    }
    |
    <HACER : "Hacer">{
        System.out.println(image + " -> PR_Hacer");
    }
}

//Variables
TOKEN : {
    <VARIABLE:(<LETRA> | "_")(<NUMERO> | <LETRA> | "_")*>{
        System.out.println(image + " -> Variable");
    }

}

SKIP : {
    " "
    | "\t"
    | "\r\n"
    | "\n"
}

// Tokens invalidos
TOKEN : {

    <NUMERO_INVALIDO: ("-" | "" | "+")(<NUMERO>)*("."( <NUMERO> | <LETRA> )* | <LETRA>)+>
    |
    <INVALIDO: ~[]>

}
// P -> <INICIO> S <FIN>
void programa(): { }{
    <INICIO> ( sentencias() )+ <FIN>
}

// S -> ( DV | LD | ID)+
void sentencias():{}{
    <COMENTARIO> |
    declaracionVariables() <DELIMITADOR> |
    leerDato() |
    imprimirDato() |
    sentenciaSi() |
    sentenciaConforme() |
    sentenciaPara() |
    sentenciaRepetir() |
    sentenciaMientras()
}

void tiposDato():{}{
    <ENTERO> | <FLOTANTE> | <CADENA> | <CARACTER> | <BOOLEANO>
}

void constantes():{}{
    <NUMERO_ENTERO> | <NUMERO_DECIMAL> | <CADENA_TEXTO> | <CARACTER_TEXTO> | <BOOLEANO_FALSO> | <BOOLEANO_VERDADERO>
}

void asignacionAritmetica():{}{
    <ASIGNACION> operacionAritmetica()
}

void operacionAritmetica():{}{
    ( <VARIABLE> | constantes() | operacionAritmeticaParentesis() )
    (operadoresAritmeticos() (<VARIABLE> | constantes() | operacionAritmeticaParentesis() ))*
}

void operacionAritmeticaParentesis():{}{
    <PAREN_ABIERTO> operacionAritmetica() <PAREN_CERRADO>
}

void operadoresAritmeticos():{}{
    <SUMA> | <RESTA> | <MULTIPLICACION> | <DIVISION> | <MODULO>
}

void operadoresRelacionales():{}{
    <OPERADOR_IGUAL> | <OPERADOR_DIFERENTE> | <OPERADOR_MAYOR> | <OPERADOR_MAYOR_IGUAL> | <OPERADOR_MENOR> | <OPERADOR_MENOR_IGUAL>
}

void operadoresLogicos():{}{
    <LOGICO_AND> | <LOGICO_OR>
}

void declaracionVariables():{}{
    <ESTABLECER> tiposDato() <VARIABLE> ( asignacionAritmetica() )?
}

void leerDato():{}{
    <INTERPRETAR> <VARIABLE> <DELIMITADOR>
}

void imprimirDato():{}{
    <ESCRIBIR> ( constantes() | <VARIABLE> ) <DELIMITADOR>
}

void sentenciaSi():{}{
    <INICIO_CONDICIONAL_SI> condicion() <ENTONCES> ( sentencias() )+
    ( <CONDICIONAL_SINO> ( sentencias() )+ )?
    <FIN_CONDICIONAL_SI>
}

// var1 + 5 < var2 - 2 || 3 + 6 != val3 % 5 <- Lograr esto (Hecho)
void condicion():{}{
    ( constantes() | <VARIABLE> | operacionAritmetica() ) operadoresRelacionales()
    ( constantes() | <VARIABLE>  | operacionAritmetica() ) ( operadoresLogicos() condicion() )*
}

void sentenciaConforme():{}{
    <INICIO_CONDICIONAL_CONFORME> <VARIABLE> <HACER>
    ( <CASO> constantes() <OPERADOR_DOS_PUNTOS> ( sentencias() )+ )+
    ( <CASO_PREDETERMINADO> <OPERADOR_DOS_PUNTOS> ( sentencias() )+ )?
    <FIN_CONFORME>
}

void sentenciaPara():{}{
    <INICIO_CICLO_PARA> (<VARIABLE> <ASIGNACION> ( constantes() | <VARIABLE> ) | declaracionVariables() )
    <CONDICION_CICLO_PARA> condicion() <INCREMENTO_CICLO_PARA> ( <NUMERO_ENTERO> | <NUMERO_DECIMAL> )
    ( sentencias() )+
    <FIN_CICLO_PARA>
}

void sentenciaRepetir():{}{
    <INICIO_CICLO_REPETIR> ( sentencias() )+
    <CONDICION_CICLO_REPETIR> condicion()
}

void sentenciaMientras():{}{
    <INICIO_CICLO_MIENTRAS> condicion() <HACER>
    ( sentencias() )+
    <FIN_CICLO_MIENTRAS>
}

